buat socket - selesai
buat server - selesai

cara mengaktifkan
1. sudo chown -R www-data:www-data /home/-----lokasi path ke folder Project
2. sudo chown -R 755 /home/------- laksi path ke folder Project
3. sudo systemctl daemon-reload
4. sudo systemctl start project_gunicorn.service

buat docker image
1. buat file docker di project
    # Menggunakan image Python sebagai base
    FROM python:3.11-slim

    # Menentukan direktori kerja di dalam container
    WORKDIR /app

    # Menyalin file requirements.txt dan menginstal dependencies
    COPY requirements.txt /app/
    RUN pip install --no-cache-dir -r requirements.txt

    # Menyalin seluruh kode proyek ke dalam container
    COPY . /app/

    # Menjalankan perintah untuk migrate dan collectstatic (opsional)
    RUN python manage.py migrate
    RUN python manage.py collectstatic --noinput

    # Menentukan perintah default untuk menjalankan aplikasi Django
    CMD ["gunicorn", "--bind", "0.0.0.0:8000", "project.wsgi:application"]
2. Buat docker-compose.yml (Opsional)
    version: '3'

    services:
    db:
        image: postgres:14
        environment:
        POSTGRES_DB: tkdd
        POSTGRES_USER: raselstr
        POSTGRES_PASSWORD: password

    web:
        build: .
        command: gunicorn project.wsgi:application --bind 0.0.0.0:8000
        volumes:
        - .:/app
        ports:
        - "8000:8000"
        depends_on:
        - db
        environment:
        - DATABASE_URL=postgres://raselstr:password@db:5432/tkdd
3. Buat File requirements.txt
    pip freeze > requirements.txt
4. Bangun dan Jalankan Container
    Jika menggunakan Dockerfile saja:

    docker build -t mydjangoapp .
    docker run -d -p 8000:8000 mydjangoapp

    Jika menggunakan docker-compose:

    docker-compose up --build

5. Akses Aplikasi
6. Mengelola Migration dan Superuser
    Untuk menjalankan perintah Django lain seperti migrate atau membuat superuser, Anda bisa menjalankan perintah-perintah ini dalam container:

    docker exec -it projectweb bash
    python manage.py migrate
    python manage.py createsuperuser

Menjalankankan
docker-compose up --build       #ini untuk membuat coutaner dan image
docker-compose down             #menghapus seluruh cointainer
docker-compose down -v            #menghapus seluruh volume yang ini bisa berakibat menghapus database dll
docker system prune -a          #menghapus seluruh file


Mengambil data dari image yang tersimpan di docker
1. menjalankan container dari image dengan membuat nama container (temp_django_container)
    docker run -d --name temp_django_container raselstr/project_1:30082024 tail -f /dev/null

    Penjelasan:
    a. -d: Menjalankan container dalam mode detached (background).
    b. --name temp_django_container: Memberi nama pada container sementara.
    c. raselstr/project_1:30082024: Nama image yang digunakan.
    d. tail -f /dev/null: Perintah untuk menjaga container tetap berjalan tanpa keluar.

2. salin seluruh file project ke folder host
    docker cp temp_django_container:/project_1 D:/KULIAH/django/
3. setelah dicopy hapus container sementara
    docker rm -f temp_django_container
4. Jalankan container dengan volume mount yg benar, jika ingin disambungkan
    docker run -v D:/KULIAH/django/project_1:/project_1 -it --name django_container raselstr/project_1:30082024 /bin/bash

Mengambil seluruh depedensi yang terpasang
    pip freeze > requirements.txt

Jika Anda ingin mengelola dependensi dengan lebih baik, 
Anda bisa menggunakan pip-tools yang menyediakan perintah pip-compile 
untuk menghasilkan file requirements.txt dari file requirements.in 
yang berisi dependensi utama Anda:
1. untuk menginstall 
    pip install pip-tools
2. untuk menjalankan dan membuat requirements.txt
    pip-compile requirements.in

restore
1. copyfile ke docker image postgres
    docker cp D:/web/db_host/backup.sql cf708063974c:/backup.sql
2. lakukan restore
    docker exec -i cf708063974c psql -U raselstr -d tkdd -f /backup.sql

beckup
1. Sebelum membuat backup, siapkan dl mound folder di docker-compose yml
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /path/on/host:/var/lib/postgresql/host_data  # Mount folder host

2. Buka docker image postgres
    docker exec -it projectwebpostgres bash
3. lakukan backup dan meletakkan difolder
    pg_dump -U raselstr -d tkdd > /var/lib/postgresql/db_host/backup.sql
    pg_dump -U raselstr -d tkdd --data-only > /var/lib/postgresql/db_host/backup.sql


JIKA AKAN MENJALANKAN MIGRATE DARI Dockerfile
1. Buka Docker image web
2. docker ps (Membuka seluruh docker seluruh yg aktif)
3. docker exec -it nama_container python manage.py migrate

MENGHAPUS DATABASE
docker exec -i projectwebpostgres psql -U raselstr -d postgres -c "DROP DATABASE tkdd;"


MEMBUAT DATABASE
docker exec -i projectwebpostgres psql -U raselstr -d postgres -c "CREATE DATABASE tkdd;"

RESTORE DATABASE
docker exec -i projectwebpostgres psql -U raselstr -d tkdd < /var/lib/postgresql/db_host/backup230920240849am.sql

cara restore tanpa masuk ke container
copy ==> docker cp D:\app\database\tkdd_backup_2025-05-29_02-00-01.sql projectwebpostgres:/backup.dump
restore ==> docker exec -it projectwebpostgres pg_restore --clean --if-exists -U raselstr -d tkdd /backup.dump